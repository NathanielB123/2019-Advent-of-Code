from functools import cache

Input = tuple("""#################################################################################
#.................#...#.#...............#...#.........#.......#.......#.....#...#
#######.#.#######.#.#.#.#.#######.#######.#.#.###.#####.#####.#.#.###C###.#.#.#.#
#.E...#.#.#.....#...#...#.#.....#.......#.#.#t#.#.....#.#...#...#.#.#.#...#.#.#.#
#.###.###.#.###.#######.#.#.###.#######.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#
#.#.......#...#...#...#.#.#.#.......#...#.#.........#...#.#.....#f#.....#...#a#.#
#.#########.#.#####.#.#.#.###.#####.#.###.#.#######.#####.#.###.#.#######.###.###
#...#.....#.#.....#.#...#...#.#.....#...#...#...#.#.....#.#...#.#...#h..#...#...#
#.#.#.###.#####.#.#.#######.#.#.#######.#.###.#.#.#####.###.#.#####.#.#.###.###.#
#.#.#...#.....#.#...#...#...#.#...#...#.#...#.#.#.....#...#.#.#.....#.#...#.L.#.#
###.#.#######.#.#####.#.#.###.###.###.#.#####.#.#.###.###.###.#.#####.###.###.#.#
#...#.#...#...#...#...#.#...#...#.....#.#...#.#.#...#.........#.#.......#...#...#
#.###.#.#.#.#####.#.###.###.#.#.#####.#.#.#.#.#.###.###########.#.#####.###.###.#
#.....#.#...#.....#...#...#.#.#.#.....#.#.#...#.#.....#.....#...#...#.#.#...#...#
#.#####.###.#####.###.###.#.###.#.#####.#.#####.#.#####.###.#.#####.#.#.###.#.###
#...#.#...#.#...#.#...#.#.#.#...#.....#.#.#.....#.#.....#...#...#.#.#.#...#.#...#
###.#.###.###.#.###.###.#.#.#.#.#######.#.#.#######.#####.#####.#.#.#.###.#####.#
#.#.....#.....#.....#...#.#...#.#.......#.#.......#...#.#.#.....#.#.#...#.......#
#.#####.#############.#.#.#.#####.#####.#.#######.###.#.#.###.###.#.#.###########
#.....#.#.#...........#.#...#.....#.....#.#...#...#...#.#.....#...#.#...........#
#.#.###.#.#.#.#####.#########.#####.#####.#.#.#.###.###.#.#####.#.#.###.#########
#.#.#...#...#.....#.#.......#.#.........#...#.#.....#.....#.X.#.#.#...#.#...#...#
###.#.###########.#########.#.#########.#.###.#######.#####.###.#####D#.#.#.#.#.#
#...#.#...........#.......#.#.....#.....#...#...#...#...#.#...#.......#...#...#.#
#.#.#.###.#######.#.#.#.###.#.###.#####.#.#####.###.###.#.###.#######.###.#####.#
#.#.#....k#...#...#.#.#.#...#...#.....#.#.#.....#.....#.#...#.#...V.#...#...#...#
#.#.#########.#.###.#.#.#.#####.#####.###.#.#####.#####.###.#.#.###.###.###.#.###
#.#...#.......#.#...#.#.#...#.......#...#.#.#.....#.....#...#...#...#.#.#.#.#...#
#.###.#.#######.#.###.#####.#.#########.#.#.###.#.#.#####.#######.###.#.#.#.###.#
#...#...#.......#.#.#.....#.#.#.#.......#.#.#...#.#.#.#...#.......#...R.#...#...#
#.#.#####.#######.#.#####.#.#.#.#.#####.###.#.#####.#.#.#.#W#######.#####S###.#.#
#.#......j#...#...#...I.#...#...#.#.....#...#.......#...#.#.#.....#...#.#.#.#.#.#
#.#########.###.###.###.#########.#####.#.#######.#######.#.#.###.###.#.#.#.#.#.#
#.......#.....#.....#.#.#...#.....#...#.#.......#.........#...#.#.#.#.#.#.#.#.#.#
#######.###.#.#######U#.#.#.#.#####.#.#########.###.###########.#.#.#.#.#.#.#.###
#...Y.#...#.#.........#...#.#.......#...#.#...#.#...#.............#.#.#.....#...#
#.#######.#.###.#####.#####.#########.#.#.#.#.#.#####.#############.#.#########B#
#...#.Q...#.#...#.#...#...#.#...#...#.#.#...#.#.......#i..#.....#...#.........#.#
#.#.#.#######.###.#.#####.#.#.#.#.#.###.#.###.#########.#.#.#.###.#.#########.#.#
#.#...........#p..........#...#...#.........#...........#...#.....#...N.........#
#######################################.@.#######################################
#.#.....#.#.........#.........#.....#.......#...#.......#...#.....#...G.....#...#
#.#.#.#.#.#.#####.#.#######.#.#.###.#.###.#.#.#.#.#####.#.###.###.#.#####.#.#.#.#
#...#r#.#.#.#...#n#.........#...#.#.#...#.#.#.#.#...#...#...#.#.#...#...#.#...#.#
#.###.#.#.#.#.###.###############.#.###.#.#.#.#.#.#.#.#####.#.#.#######.#.#####.#
#.#d#.#.#.....#...#.........#.....#.....#.#..m#.#.#.#.....#.#.#.....#...#...#...#
#.#.#.#.#######.#########.###.#.#######.#.#####.#.#.#####.#.#.###.#.#.#####.#.###
#...#.#.#..b....#.....#...#...#.#.....#.#.#...#.#.#.#.......#.....#...#.....#...#
#.###.#.#.#######.###.#.###.###.#.###.#.#.#.#.#.#.#.#################.#.#######.#
#.#...#...#.......#...#.#...#.#...#.#...#.#.#.#.#.#.#.....#.......#...#...#.K.#.#
###.#######.###.###.###.#.###.#####.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.#.#
#...#.......#.#...#.....#...#.......#...#.#.#...#.#.#.#.#...#...#.....#...#.#.#.#
#.#####.#####.###.#####.###.###.#.#.###.#.###.#####.#.#.#####.#########.###.###.#
#.#...#..z#.....#...#.#.#.#...#.#.#.....#...#.#.....#.....#...#.........#.....#.#
#.#.#.###.###.#.###.#.#.#.###.###.#####.###.#.#.#.#######.###.#.#########.###.#.#
#.#.#..s#.....#.#...#.......#...#.#.#...#...#...#.#.....#.....#...#.#.....#.#.#.#
#.#.###.#######.#.#############.#.#.#.###.#########.#.#######.###.#.#.#####.#.#.#
#.....#.#.....#.#.............#...#...#.#.M...#.....#...#...#.#...#...#.....#...#
#######.#.###.#######.#####.#.#####.###.#####.#.#######.#.#.#.#.#####.###.#.#####
#...#...#.#.#.......#.....#.#...#...#...#.....#.#.....#.#.#...#.....#.....#...#.#
#O###.###.#.#######.###.###.#####.#####.#.#####.#.###.#.#.#####.###.#########.#.#
#...#.....#.....#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#...#......o#...#.#
###.#########.#.#.#.#.#.#.#.#.#######.#.#####.#####.#.#.###.#.###.#######.#.###J#
#...#.........#.#.#.#.#.#.#.#.#.......#.#.......#.....#.#...#..x#.#.....#.#.....#
#.#.#.#########.#.###.#.#.###.###.#.#####.#####.#.#####.#.#####.#.#.#####.#.#####
#.#...#....g#.#.#.....#.#...#...#.#.....#.....#.#.#...#.....#...#...#.....#.#...#
#.###.#.###.#.#.###########.###.#######.#.###.###.#.#######.#.#####.#.###.###.#.#
#.#.#.#...#.#.................#.#...#...#.#.#.....#.#....v#.#.#.....#.#.#.#...#.#
#.#.#.###.#.###########.#####.#.#.#.#.#.#.#.#######.#.###.###.#.#####.#.#.#.###.#
#.#.#...#.#...F...#.....#...#.#.#.#...#.#.#.....#...#...#.....#.....#.#...#q#.#.#
#.#.###.#.#######.#.#####.#.###.#.#######.###.#.#.#.###.###########.#.#####.#.#.#
#.#...#.#.#...#...#.#...#.#.....#.......#.....#...#.#.#w#.........#.#.....#.#.#.#
#.#.#.#.#.#.#.#.#.###.#.#.#########.###.###########.#.#.#.#.#####.#######.#.#.#.#
#.#.#...#.#.#...#.#...#.#...#.....#...#.#...#.......#.#.#.#.#...#.P.#...#.#...#y#
#.#######.#.#.#####.###.###.#.###.#####.#.###.#######.#.###.#.#.###.#.#.#.#.###.#
#.#.....#.#c#.#...#.#l..#...#...#.#.A.#.#.....#.......#...Z.#.#...#.#.#.#...#...#
#.#.###T#.#.###.#.#.#.###.###.#.#.#.#.#.#.#########.#.###########.#.#.#.#####.###
#.#...#.#.#.....#...#...#.H.#.#.#.#.#...#...#.......#.....#.......#...#.....#..u#
#.###.#.#.#############.###.###.#.#.###.###.###.#########.###.###.#########.###.#
#.....#..........e....#.........#...#...#.......#.............#...........#.....#
#################################################################################""".split("\n"))

Input2 = tuple("""#################################################################################
#.................#...#.#...............#...#.........#.......#.......#.....#...#
#######.#.#######.#.#.#.#.#######.#######.#.#.###.#####.#####.#.#.###C###.#.#.#.#
#.E...#.#.#.....#...#...#.#.....#.......#.#.#t#.#.....#.#...#...#.#.#.#...#.#.#.#
#.###.###.#.###.#######.#.#.###.#######.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#
#.#.......#...#...#...#.#.#.#.......#...#.#.........#...#.#.....#f#.....#...#a#.#
#.#########.#.#####.#.#.#.###.#####.#.###.#.#######.#####.#.###.#.#######.###.###
#...#.....#.#.....#.#...#...#.#.....#...#...#...#.#.....#.#...#.#...#h..#...#...#
#.#.#.###.#####.#.#.#######.#.#.#######.#.###.#.#.#####.###.#.#####.#.#.###.###.#
#.#.#...#.....#.#...#...#...#.#...#...#.#...#.#.#.....#...#.#.#.....#.#...#.L.#.#
###.#.#######.#.#####.#.#.###.###.###.#.#####.#.#.###.###.###.#.#####.###.###.#.#
#...#.#...#...#...#...#.#...#...#.....#.#...#.#.#...#.........#.#.......#...#...#
#.###.#.#.#.#####.#.###.###.#.#.#####.#.#.#.#.#.###.###########.#.#####.###.###.#
#.....#.#...#.....#...#...#.#.#.#.....#.#.#...#.#.....#.....#...#...#.#.#...#...#
#.#####.###.#####.###.###.#.###.#.#####.#.#####.#.#####.###.#.#####.#.#.###.#.###
#...#.#...#.#...#.#...#.#.#.#...#.....#.#.#.....#.#.....#...#...#.#.#.#...#.#...#
###.#.###.###.#.###.###.#.#.#.#.#######.#.#.#######.#####.#####.#.#.#.###.#####.#
#.#.....#.....#.....#...#.#...#.#.......#.#.......#...#.#.#.....#.#.#...#.......#
#.#####.#############.#.#.#.#####.#####.#.#######.###.#.#.###.###.#.#.###########
#.....#.#.#...........#.#...#.....#.....#.#...#...#...#.#.....#...#.#...........#
#.#.###.#.#.#.#####.#########.#####.#####.#.#.#.###.###.#.#####.#.#.###.#########
#.#.#...#...#.....#.#.......#.#.........#...#.#.....#.....#.X.#.#.#...#.#...#...#
###.#.###########.#########.#.#########.#.###.#######.#####.###.#####D#.#.#.#.#.#
#...#.#...........#.......#.#.....#.....#...#...#...#...#.#...#.......#...#...#.#
#.#.#.###.#######.#.#.#.###.#.###.#####.#.#####.###.###.#.###.#######.###.#####.#
#.#.#....k#...#...#.#.#.#...#...#.....#.#.#.....#.....#.#...#.#...V.#...#...#...#
#.#.#########.#.###.#.#.#.#####.#####.###.#.#####.#####.###.#.#.###.###.###.#.###
#.#...#.......#.#...#.#.#...#.......#...#.#.#.....#.....#...#...#...#.#.#.#.#...#
#.###.#.#######.#.###.#####.#.#########.#.#.###.#.#.#####.#######.###.#.#.#.###.#
#...#...#.......#.#.#.....#.#.#.#.......#.#.#...#.#.#.#...#.......#...R.#...#...#
#.#.#####.#######.#.#####.#.#.#.#.#####.###.#.#####.#.#.#.#W#######.#####S###.#.#
#.#......j#...#...#...I.#...#...#.#.....#...#.......#...#.#.#.....#...#.#.#.#.#.#
#.#########.###.###.###.#########.#####.#.#######.#######.#.#.###.###.#.#.#.#.#.#
#.......#.....#.....#.#.#...#.....#...#.#.......#.........#...#.#.#.#.#.#.#.#.#.#
#######.###.#.#######U#.#.#.#.#####.#.#########.###.###########.#.#.#.#.#.#.#.###
#...Y.#...#.#.........#...#.#.......#...#.#...#.#...#.............#.#.#.....#...#
#.#######.#.###.#####.#####.#########.#.#.#.#.#.#####.#############.#.#########B#
#...#.Q...#.#...#.#...#...#.#...#...#.#.#...#.#.......#i..#.....#...#.........#.#
#.#.#.#######.###.#.#####.#.#.#.#.#.###.#.###.#########.#.#.#.###.#.#########.#.#
#.#...........#p..........#...#...#....@#@..#...........#...#.....#...N.........#
#################################################################################
#.#.....#.#.........#.........#.....#..@#@..#...#.......#...#.....#...G.....#...#
#.#.#.#.#.#.#####.#.#######.#.#.###.#.###.#.#.#.#.#####.#.###.###.#.#####.#.#.#.#
#...#r#.#.#.#...#n#.........#...#.#.#...#.#.#.#.#...#...#...#.#.#...#...#.#...#.#
#.###.#.#.#.#.###.###############.#.###.#.#.#.#.#.#.#.#####.#.#.#######.#.#####.#
#.#d#.#.#.....#...#.........#.....#.....#.#..m#.#.#.#.....#.#.#.....#...#...#...#
#.#.#.#.#######.#########.###.#.#######.#.#####.#.#.#####.#.#.###.#.#.#####.#.###
#...#.#.#..b....#.....#...#...#.#.....#.#.#...#.#.#.#.......#.....#...#.....#...#
#.###.#.#.#######.###.#.###.###.#.###.#.#.#.#.#.#.#.#################.#.#######.#
#.#...#...#.......#...#.#...#.#...#.#...#.#.#.#.#.#.#.....#.......#...#...#.K.#.#
###.#######.###.###.###.#.###.#####.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.#.#
#...#.......#.#...#.....#...#.......#...#.#.#...#.#.#.#.#...#...#.....#...#.#.#.#
#.#####.#####.###.#####.###.###.#.#.###.#.###.#####.#.#.#####.#########.###.###.#
#.#...#..z#.....#...#.#.#.#...#.#.#.....#...#.#.....#.....#...#.........#.....#.#
#.#.#.###.###.#.###.#.#.#.###.###.#####.###.#.#.#.#######.###.#.#########.###.#.#
#.#.#..s#.....#.#...#.......#...#.#.#...#...#...#.#.....#.....#...#.#.....#.#.#.#
#.#.###.#######.#.#############.#.#.#.###.#########.#.#######.###.#.#.#####.#.#.#
#.....#.#.....#.#.............#...#...#.#.M...#.....#...#...#.#...#...#.....#...#
#######.#.###.#######.#####.#.#####.###.#####.#.#######.#.#.#.#.#####.###.#.#####
#...#...#.#.#.......#.....#.#...#...#...#.....#.#.....#.#.#...#.....#.....#...#.#
#O###.###.#.#######.###.###.#####.#####.#.#####.#.###.#.#.#####.###.#########.#.#
#...#.....#.....#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#...#......o#...#.#
###.#########.#.#.#.#.#.#.#.#.#######.#.#####.#####.#.#.###.#.###.#######.#.###J#
#...#.........#.#.#.#.#.#.#.#.#.......#.#.......#.....#.#...#..x#.#.....#.#.....#
#.#.#.#########.#.###.#.#.###.###.#.#####.#####.#.#####.#.#####.#.#.#####.#.#####
#.#...#....g#.#.#.....#.#...#...#.#.....#.....#.#.#...#.....#...#...#.....#.#...#
#.###.#.###.#.#.###########.###.#######.#.###.###.#.#######.#.#####.#.###.###.#.#
#.#.#.#...#.#.................#.#...#...#.#.#.....#.#....v#.#.#.....#.#.#.#...#.#
#.#.#.###.#.###########.#####.#.#.#.#.#.#.#.#######.#.###.###.#.#####.#.#.#.###.#
#.#.#...#.#...F...#.....#...#.#.#.#...#.#.#.....#...#...#.....#.....#.#...#q#.#.#
#.#.###.#.#######.#.#####.#.###.#.#######.###.#.#.#.###.###########.#.#####.#.#.#
#.#...#.#.#...#...#.#...#.#.....#.......#.....#...#.#.#w#.........#.#.....#.#.#.#
#.#.#.#.#.#.#.#.#.###.#.#.#########.###.###########.#.#.#.#.#####.#######.#.#.#.#
#.#.#...#.#.#...#.#...#.#...#.....#...#.#...#.......#.#.#.#.#...#.P.#...#.#...#y#
#.#######.#.#.#####.###.###.#.###.#####.#.###.#######.#.###.#.#.###.#.#.#.#.###.#
#.#.....#.#c#.#...#.#l..#...#...#.#.A.#.#.....#.......#...Z.#.#...#.#.#.#...#...#
#.#.###T#.#.###.#.#.#.###.###.#.#.#.#.#.#.#########.#.###########.#.#.#.#####.###
#.#...#.#.#.....#...#...#.H.#.#.#.#.#...#...#.......#.....#.......#...#.....#..u#
#.###.#.#.#############.###.###.#.#.###.###.###.#########.###.###.#########.###.#
#.....#..........e....#.........#...#...#.......#.............#...........#.....#
#################################################################################""".split("\n"))

@cache
def FloodFill(Maze, Keys, Pos):
    #print(Keys)
    ToFill = [[-1 for y in range(len(Maze[x]))] for x in range(len(Maze))]
    Goals = dict()
    ToFill[Pos[0]][Pos[1]] = 0
    Moves = ((0, 1), (1, 0), (-1, 0), (0, -1))
    Done = False
    PotPos = [Pos]
    Steps = 0
    while not Done:
        Done = True
        Steps+=1
        NewPos = []
        for Pos in PotPos:
            for Move in Moves:
                if Pos[0] + Move[0] > 0 and Pos[0] + Move[0] < len(Maze) and Pos[1] + Move[1] > 0 and Pos[1] + Move[1] < len(Maze[Pos[0] + Move[0]]):
                    TPos = (Pos[0] + Move[0], Pos[1] + Move[1])
                    if ToFill[TPos[0]][TPos[1]] == -1:
                        Tile = Maze[TPos[0]][TPos[1]]
                        if Tile == "." or Tile == "@":
                            ToFill[TPos[0]][TPos[1]] = Steps
                            NewPos.append(TPos)
                            Done = False
                        elif Tile == "#":
                            ToFill[TPos[0]][TPos[1]] = -2
                        elif Tile.upper() == Tile:
                            if Tile.lower() in Keys:
                                ToFill[TPos[0]][TPos[1]] = Steps
                                NewPos.append(TPos)
                                Done = False
                            else:
                                ToFill[TPos[0]][TPos[1]] = -2
                        else:
                            if Tile in Keys:
                                ToFill[TPos[0]][TPos[1]]= Steps
                                NewPos.append(TPos)
                                Done = False
                            else:
                                ToFill[TPos[0]][TPos[1]] = -3
                                if Tile not in Goals:
                                    Goals[Tile] = (TPos, Steps)
        PotPos = NewPos

    #print(ToFill)
    return Goals

@cache
def RecursiveTry(Maze, Keys, Pos, Steps):
    #print(Keys)
    Options = FloodFill(Maze, Keys, Pos)
    NewSteps = None
    if len(Options.keys()) > 0:
        for Opt in Options.keys():
            Temp = RecursiveTry(Maze, Keys.union(frozenset([Opt])), Options[Opt][0], Steps + Options[Opt][1])
            if NewSteps is None:
                NewSteps = Temp
            else:
                NewSteps = min(Temp, NewSteps)
        return NewSteps
    else:
        return Steps

@cache
def RecursiveTry2(Maze, Keys, PosList, Steps):
    Options = dict()
    for i in range(len(PosList)):
        TempOptions = FloodFill(Maze, Keys, PosList[i])
        for Opt in TempOptions:
            Options[Opt] = TempOptions[Opt] + tuple([i])
        
    NewSteps = None
    if len(Options.keys()) > 0:
        for Opt in Options.keys():
            NewPosList = list(PosList)
            NewPosList[Options[Opt][2]] = Options[Opt][0]
            NewPosList = tuple(NewPosList)
            Temp = RecursiveTry2(Maze, Keys.union(frozenset([Opt])), NewPosList, Steps + Options[Opt][1])
            if NewSteps is None:
                NewSteps = Temp
            else:
                NewSteps = min(Temp, NewSteps)
        return NewSteps
    else:
        return Steps

def Main(Maze):
    Pos = None
    for x in range(len(Maze)):
        for y in range(len(Maze[x])):
            if Maze[x][y] == "@":
                Pos = (x, y)
                break
        if Pos is not None:
            break
    else:
        raise Exception("Could not find start point!")
    print(RecursiveTry(Maze, frozenset(), Pos, 0))

def Main2(Maze):
    Pos = []
    for x in range(len(Maze)):
        for y in range(len(Maze[x])):
            if Maze[x][y] == "@":
                Pos.append((x,y))
    if len(Pos) != 4:
        raise Exception("Could not find four start points!")
    print(RecursiveTry2(Maze, frozenset(), tuple(Pos), 0))

#Main(Input)
Main2(Input2)
                
